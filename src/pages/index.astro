---
import Layout from "../layouts/Layout.astro";

import inscriptions from "../inscriptions.json";
---

<Layout title="index">
	<main>
		<div class="title-block">
			<h1 class="title">
				<span>welcome to</span>
				<span><span class="magic">the pigeon zone</span>.</span>
			</h1>
			<h2 class="subtitle">please enjoy your stay</h2>
		</div>

		<h3>we've got:</h3>

		<div class="cards">
			<a href="/rosetta" class="card-link">
				<div class="card">
					<h4>the rosetta stone</h4>

					<div class="stone">
						{
							inscriptions.map((inscription) => (
								<div class="inscription">
									<p>{inscription.language}</p>
								</div>
							))
						}
					</div>
				</div>
			</a>

			<a href="https://github.com/backwardspy" class="card-link">
				<div class="card">
					<h4>a github page</h4>
					<p>
						(where i make it as difficult as possible to change the
						colour of your favourite application)
					</p>
				</div>
			</a>

			<a href="/ctp" class="card-link">
				<div class="card">
					<h4>some dancing bois</h4>
					<span class="oversize">ðŸ•ºðŸ•ºðŸ•º</span>
				</div>
			</a>
		</div>
	</main>
</Layout>
<script>
	let rect: DOMRect | null = null;

	function mouseenter(ev: Event) {
		const card = ev.currentTarget;
		if (card === null || !(card instanceof HTMLElement)) {
			return;
		}
		rect = card.getBoundingClientRect();
	}

	function mousemove(_ev: Event) {
		const ev = _ev as MouseEvent;
		if (rect === null) {
			return;
		}
		const deflect = 10;
		const card = ev.currentTarget;
		if (card === null || !(card instanceof HTMLElement)) {
			return;
		}
		let halfW = rect.width / 2;
		let halfH = rect.height / 2;
		let midX = rect.left + halfW;
		let midY = rect.top + halfH;
		let dx = (-deflect * (ev.clientX - midX)) / halfW;
		let dy = (deflect * (ev.clientY - midY)) / halfH;
		card.style.setProperty("--dx", `${dx}deg`);
		card.style.setProperty("--dy", `${dy}deg`);

		card.style.setProperty("--px", `${dx * 15}px`);
		card.style.setProperty("--py", `${dy * -15}px`);
	}

	function mouseleave(ev: Event) {
		const card = ev.currentTarget;
		if (card === null || !(card instanceof HTMLElement)) {
			return;
		}
		card.style.setProperty("--dx", "0deg");
		card.style.setProperty("--dy", "0deg");
		card.style.setProperty("--px", "0px");
		card.style.setProperty("--py", "0px");
		rect = null;
	}

	const cards = document.querySelectorAll("div.card");
	for (const card of cards) {
		card.addEventListener("mouseenter", mouseenter);
		card.addEventListener("mousemove", mousemove);
		card.addEventListener("mouseleave", mouseleave);
	}
</script>

<style>
	:root {
		--px: 0px;
		--py: 0px;
	}

	a.card-link {
		color: var(--c-text);
		text-decoration: none;
		perspective: 800px;
	}

	div.cards {
		display: flex;
		flex-wrap: wrap;
		justify-content: space-evenly;
		gap: 1rem;
	}

	div.card {
		position: relative;
		width: 300px;
		height: 100%;
		background-color: rgba(255, 255, 255, 0.1);
		padding: 1rem;
		margin: 1rem 0;
		border-radius: 0.5rem;
		box-shadow: 0 0 1rem 0 rgba(0, 0, 0, 0.1);
		text-align: center;
		transition: 0.2s ease scale;
	}

	div.card:hover {
		transform: rotateX(var(--dy)) rotateY(var(--dx));
		scale: 1.05;
	}

	div.card::after {
		content: "";
		position: absolute;
		inset: 0;
		border-radius: 0.5rem;
		pointer-events: none;
		background: radial-gradient(
			400px circle at var(--px) var(--py),
			rgba(255, 255, 255, 0.4),
			transparent
		);
	}

	@media (prefers-color-scheme: dark) {
		div.card {
			background-color: rgba(0, 0, 0, 0.1);
		}

		div.card::after {
			background: radial-gradient(
				400px circle at var(--px) var(--py),
				rgba(255, 255, 255, 0.2),
				transparent
			);
		}
	}

	div.stone {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
	}

	div.inscription {
		padding: 0.2rem;
	}

	span.oversize {
		font-size: 3rem;
	}
</style>
